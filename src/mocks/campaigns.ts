import { ICampaign, ECampaignStatus } from '@/custom-views/campaigns';
import { faker } from '@faker-js/faker';

export const mockCampaigns: ICampaign[] = [
  {
    id: faker.string.uuid(),
    name: faker.music.songName(),
    description: faker.commerce.productDescription(),
    fromDate: faker.date.anytime(),
    toDate: faker.date.anytime(),
    process: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    status: ECampaignStatus.FINISH,
    reward: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    participateRate: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    passRate: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    employeeIds: [],
    aspectWeightIds: [],
    numberOfQuestion: Number(faker.commerce.price({ min: 10, max: 30, dec: 0 })),
    threshHold: Number(faker.commerce.price({ min: 10, max: 30, dec: 0 }))
  },
  {
    id: faker.string.uuid(),
    name: faker.music.songName(),
    description: faker.commerce.productDescription(),
    fromDate: faker.date.anytime(),
    toDate: faker.date.anytime(),
    process: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    status: ECampaignStatus.FINISH,
    reward: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    participateRate: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    passRate: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    employeeIds: [],
    aspectWeightIds: [],
    numberOfQuestion: Number(faker.commerce.price({ min: 10, max: 30, dec: 0 })),
    threshHold: Number(faker.commerce.price({ min: 10, max: 30, dec: 0 }))
  },
  {
    id: faker.string.uuid(),
    name: faker.music.songName(),
    description: faker.commerce.productDescription(),
    fromDate: faker.date.anytime(),
    toDate: faker.date.anytime(),
    process: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    status: ECampaignStatus.FINISH,
    reward: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    participateRate: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    passRate: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    employeeIds: [],
    aspectWeightIds: [],
    numberOfQuestion: Number(faker.commerce.price({ min: 10, max: 30, dec: 0 })),
    threshHold: Number(faker.commerce.price({ min: 10, max: 30, dec: 0 }))
  },
  {
    id: faker.string.uuid(),
    name: faker.music.songName(),
    description: faker.commerce.productDescription(),
    fromDate: faker.date.anytime(),
    toDate: faker.date.anytime(),
    process: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    status: ECampaignStatus.FINISH,
    reward: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    participateRate: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    passRate: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    employeeIds: [],
    aspectWeightIds: [],
    numberOfQuestion: Number(faker.commerce.price({ min: 10, max: 30, dec: 0 })),
    threshHold: Number(faker.commerce.price({ min: 10, max: 30, dec: 0 }))
  },
  {
    id: faker.string.uuid(),
    name: faker.music.songName(),
    description: faker.commerce.productDescription(),
    fromDate: faker.date.anytime(),
    toDate: faker.date.anytime(),
    process: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    status: ECampaignStatus.FINISH,
    reward: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    participateRate: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    passRate: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    employeeIds: [],
    aspectWeightIds: [],
    numberOfQuestion: Number(faker.commerce.price({ min: 10, max: 30, dec: 0 })),
    threshHold: Number(faker.commerce.price({ min: 10, max: 30, dec: 0 }))
  },
  {
    id: faker.string.uuid(),
    name: faker.music.songName(),
    description: faker.commerce.productDescription(),
    fromDate: faker.date.anytime(),
    toDate: faker.date.anytime(),
    process: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    status: ECampaignStatus.FINISH,
    reward: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    participateRate: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    passRate: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    employeeIds: [],
    aspectWeightIds: [],
    numberOfQuestion: Number(faker.commerce.price({ min: 10, max: 30, dec: 0 })),
    threshHold: Number(faker.commerce.price({ min: 10, max: 30, dec: 0 }))
  },
  {
    id: faker.string.uuid(),
    name: faker.music.songName(),
    description: faker.commerce.productDescription(),
    fromDate: faker.date.anytime(),
    toDate: faker.date.anytime(),
    process: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    status: ECampaignStatus.FINISH,
    reward: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    participateRate: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    passRate: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    employeeIds: [],
    aspectWeightIds: [],
    numberOfQuestion: Number(faker.commerce.price({ min: 10, max: 30, dec: 0 })),
    threshHold: Number(faker.commerce.price({ min: 10, max: 30, dec: 0 }))
  },
  {
    id: faker.string.uuid(),
    name: faker.music.songName(),
    description: faker.commerce.productDescription(),
    fromDate: faker.date.anytime(),
    toDate: faker.date.anytime(),
    process: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    status: ECampaignStatus.FINISH,
    reward: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    participateRate: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    passRate: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    employeeIds: [],
    aspectWeightIds: [],
    numberOfQuestion: Number(faker.commerce.price({ min: 10, max: 30, dec: 0 })),
    threshHold: Number(faker.commerce.price({ min: 10, max: 30, dec: 0 }))
  },
  {
    id: faker.string.uuid(),
    name: faker.music.songName(),
    description: faker.commerce.productDescription(),
    fromDate: faker.date.anytime(),
    toDate: faker.date.anytime(),
    process: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    status: ECampaignStatus.FINISH,
    reward: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    participateRate: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    passRate: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    employeeIds: [],
    aspectWeightIds: [],
    numberOfQuestion: Number(faker.commerce.price({ min: 10, max: 30, dec: 0 })),
    threshHold: Number(faker.commerce.price({ min: 10, max: 30, dec: 0 }))
  },
  {
    id: faker.string.uuid(),
    name: faker.music.songName(),
    description: faker.commerce.productDescription(),
    fromDate: faker.date.anytime(),
    toDate: faker.date.anytime(),
    process: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    status: ECampaignStatus.FINISH,
    reward: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    participateRate: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    passRate: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    employeeIds: [],
    aspectWeightIds: [],
    numberOfQuestion: Number(faker.commerce.price({ min: 10, max: 30, dec: 0 })),
    threshHold: Number(faker.commerce.price({ min: 10, max: 30, dec: 0 }))
  },
  {
    id: faker.string.uuid(),
    name: faker.music.songName(),
    description: faker.commerce.productDescription(),
    fromDate: faker.date.anytime(),
    toDate: faker.date.anytime(),
    process: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    status: ECampaignStatus.FINISH,
    reward: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    participateRate: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    passRate: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    employeeIds: [],
    aspectWeightIds: [],
    numberOfQuestion: Number(faker.commerce.price({ min: 10, max: 30, dec: 0 })),
    threshHold: Number(faker.commerce.price({ min: 10, max: 30, dec: 0 }))
  },
  {
    id: faker.string.uuid(),
    name: faker.music.songName(),
    description: faker.commerce.productDescription(),
    fromDate: faker.date.anytime(),
    toDate: faker.date.anytime(),
    process: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    status: ECampaignStatus.FINISH,
    reward: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    participateRate: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    passRate: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    employeeIds: [],
    aspectWeightIds: [],
    numberOfQuestion: Number(faker.commerce.price({ min: 10, max: 30, dec: 0 })),
    threshHold: Number(faker.commerce.price({ min: 10, max: 30, dec: 0 }))
  },
  {
    id: faker.string.uuid(),
    name: faker.music.songName(),
    description: faker.commerce.productDescription(),
    fromDate: faker.date.anytime(),
    toDate: faker.date.anytime(),
    process: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    status: ECampaignStatus.FINISH,
    reward: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    participateRate: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    passRate: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    employeeIds: [],
    aspectWeightIds: [],
    numberOfQuestion: Number(faker.commerce.price({ min: 10, max: 30, dec: 0 })),
    threshHold: Number(faker.commerce.price({ min: 10, max: 30, dec: 0 }))
  },
  {
    id: faker.string.uuid(),
    name: faker.music.songName(),
    description: faker.commerce.productDescription(),
    fromDate: faker.date.anytime(),
    toDate: faker.date.anytime(),
    process: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    status: ECampaignStatus.FINISH,
    reward: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    participateRate: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    passRate: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    employeeIds: [],
    aspectWeightIds: [],
    numberOfQuestion: Number(faker.commerce.price({ min: 10, max: 30, dec: 0 })),
    threshHold: Number(faker.commerce.price({ min: 10, max: 30, dec: 0 }))
  },
  {
    id: faker.string.uuid(),
    name: faker.music.songName(),
    description: faker.commerce.productDescription(),
    fromDate: faker.date.anytime(),
    toDate: faker.date.anytime(),
    process: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    status: ECampaignStatus.FINISH,
    reward: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    participateRate: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    passRate: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    employeeIds: [],
    aspectWeightIds: [],
    numberOfQuestion: Number(faker.commerce.price({ min: 10, max: 30, dec: 0 })),
    threshHold: Number(faker.commerce.price({ min: 10, max: 30, dec: 0 }))
  },
  {
    id: faker.string.uuid(),
    name: faker.music.songName(),
    description: faker.commerce.productDescription(),
    fromDate: faker.date.anytime(),
    toDate: faker.date.anytime(),
    process: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    status: ECampaignStatus.FINISH,
    reward: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    participateRate: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    passRate: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    employeeIds: [],
    aspectWeightIds: [],
    numberOfQuestion: Number(faker.commerce.price({ min: 10, max: 30, dec: 0 })),
    threshHold: Number(faker.commerce.price({ min: 10, max: 30, dec: 0 }))
  },
  {
    id: faker.string.uuid(),
    name: faker.music.songName(),
    description: faker.commerce.productDescription(),
    fromDate: faker.date.anytime(),
    toDate: faker.date.anytime(),
    process: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    status: ECampaignStatus.FINISH,
    reward: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    participateRate: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    passRate: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    employeeIds: [],
    aspectWeightIds: [],
    numberOfQuestion: Number(faker.commerce.price({ min: 10, max: 30, dec: 0 })),
    threshHold: Number(faker.commerce.price({ min: 10, max: 30, dec: 0 }))
  },
  {
    id: faker.string.uuid(),
    name: faker.music.songName(),
    description: faker.commerce.productDescription(),
    fromDate: faker.date.anytime(),
    toDate: faker.date.anytime(),
    process: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    status: ECampaignStatus.FINISH,
    reward: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    participateRate: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    passRate: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    employeeIds: [],
    aspectWeightIds: [],
    numberOfQuestion: Number(faker.commerce.price({ min: 10, max: 30, dec: 0 })),
    threshHold: Number(faker.commerce.price({ min: 10, max: 30, dec: 0 }))
  },
  {
    id: faker.string.uuid(),
    name: faker.music.songName(),
    description: faker.commerce.productDescription(),
    fromDate: faker.date.anytime(),
    toDate: faker.date.anytime(),
    process: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    status: ECampaignStatus.FINISH,
    reward: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    participateRate: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    passRate: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    employeeIds: [],
    aspectWeightIds: [],
    numberOfQuestion: Number(faker.commerce.price({ min: 10, max: 30, dec: 0 })),
    threshHold: Number(faker.commerce.price({ min: 10, max: 30, dec: 0 }))
  },
  {
    id: faker.string.uuid(),
    name: faker.music.songName(),
    description: faker.commerce.productDescription(),
    fromDate: faker.date.anytime(),
    toDate: faker.date.anytime(),
    process: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    status: ECampaignStatus.FINISH,
    reward: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    participateRate: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    passRate: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    employeeIds: [],
    aspectWeightIds: [],
    numberOfQuestion: Number(faker.commerce.price({ min: 10, max: 30, dec: 0 })),
    threshHold: Number(faker.commerce.price({ min: 10, max: 30, dec: 0 }))
  },
  {
    id: faker.string.uuid(),
    name: faker.music.songName(),
    description: faker.commerce.productDescription(),
    fromDate: faker.date.anytime(),
    toDate: faker.date.anytime(),
    process: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    status: ECampaignStatus.FINISH,
    reward: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    participateRate: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    passRate: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    employeeIds: [],
    aspectWeightIds: [],
    numberOfQuestion: Number(faker.commerce.price({ min: 10, max: 30, dec: 0 })),
    threshHold: Number(faker.commerce.price({ min: 10, max: 30, dec: 0 }))
  },
  {
    id: faker.string.uuid(),
    name: faker.music.songName(),
    description: faker.commerce.productDescription(),
    fromDate: faker.date.anytime(),
    toDate: faker.date.anytime(),
    process: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    status: ECampaignStatus.FINISH,
    reward: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    participateRate: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    passRate: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    employeeIds: [],
    aspectWeightIds: [],
    numberOfQuestion: Number(faker.commerce.price({ min: 10, max: 30, dec: 0 })),
    threshHold: Number(faker.commerce.price({ min: 10, max: 30, dec: 0 }))
  },
  {
    id: faker.string.uuid(),
    name: faker.music.songName(),
    description: faker.commerce.productDescription(),
    fromDate: faker.date.anytime(),
    toDate: faker.date.anytime(),
    process: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    status: ECampaignStatus.FINISH,
    reward: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    participateRate: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    passRate: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    employeeIds: [],
    aspectWeightIds: [],
    numberOfQuestion: Number(faker.commerce.price({ min: 10, max: 30, dec: 0 })),
    threshHold: Number(faker.commerce.price({ min: 10, max: 30, dec: 0 }))
  },
  {
    id: faker.string.uuid(),
    name: faker.music.songName(),
    description: faker.commerce.productDescription(),
    fromDate: faker.date.anytime(),
    toDate: faker.date.anytime(),
    process: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    status: ECampaignStatus.FINISH,
    reward: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    participateRate: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    passRate: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    employeeIds: [],
    aspectWeightIds: [],
    numberOfQuestion: Number(faker.commerce.price({ min: 10, max: 30, dec: 0 })),
    threshHold: Number(faker.commerce.price({ min: 10, max: 30, dec: 0 }))
  },
  {
    id: faker.string.uuid(),
    name: faker.music.songName(),
    description: faker.commerce.productDescription(),
    fromDate: faker.date.anytime(),
    toDate: faker.date.anytime(),
    process: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    status: ECampaignStatus.FINISH,
    reward: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    participateRate: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    passRate: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    employeeIds: [],
    aspectWeightIds: [],
    numberOfQuestion: Number(faker.commerce.price({ min: 10, max: 30, dec: 0 })),
    threshHold: Number(faker.commerce.price({ min: 10, max: 30, dec: 0 }))
  },
  {
    id: faker.string.uuid(),
    name: faker.music.songName(),
    description: faker.commerce.productDescription(),
    fromDate: faker.date.anytime(),
    toDate: faker.date.anytime(),
    process: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    status: ECampaignStatus.FINISH,
    reward: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    participateRate: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    passRate: Number(faker.commerce.price({ min: 10, max: 80, dec: 0 })),
    employeeIds: [],
    aspectWeightIds: [],
    numberOfQuestion: Number(faker.commerce.price({ min: 10, max: 30, dec: 0 })),
    threshHold: Number(faker.commerce.price({ min: 10, max: 30, dec: 0 }))
  }
];
